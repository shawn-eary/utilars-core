// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace efModels
{
    public partial class utilarsDBContext : DbContext
    {
        public utilarsDBContext()
        {
        }

        public utilarsDBContext(DbContextOptions<utilarsDBContext> options)
            : base(options)
        {
        }

        public virtual DbSet<ArtPiece> ArtPiece { get; set; }
        public virtual DbSet<ArtType> ArtType { get; set; }
        public virtual DbSet<BlogEntry> BlogEntry { get; set; }
        public virtual DbSet<Contributor> Contributor { get; set; }
        public virtual DbSet<License> License { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<ArtPiece>(entity =>
            {
                entity.ToTable("artPiece");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.MainUri)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("mainURI");

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TmbUri)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("tmbURI");

                entity.HasMany(d => d.ArtType)
                    .WithMany(p => p.ArtPiece)
                    .UsingEntity<Dictionary<string, object>>(
                        "ArtPieceType",
                        l => l.HasOne<ArtType>().WithMany().HasForeignKey("ArtTypeId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_artPieceType_1"),
                        r => r.HasOne<ArtPiece>().WithMany().HasForeignKey("ArtPieceId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_artPieceType_0"),
                        j =>
                        {
                            j.HasKey("ArtPieceId", "ArtTypeId").HasName("PrimaryKey_bf0b47b9-4283-4bb3-967b-e304f12b82b2");

                            j.ToTable("artPieceType");

                            j.IndexerProperty<int>("ArtPieceId").HasColumnName("artPieceId");

                            j.IndexerProperty<int>("ArtTypeId").HasColumnName("artTypeId");
                        });

                entity.HasMany(d => d.Contributor)
                    .WithMany(p => p.ArtPiece)
                    .UsingEntity<Dictionary<string, object>>(
                        "ArtPieceContributor",
                        l => l.HasOne<Contributor>().WithMany().HasForeignKey("ContributorId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_artPieceContributor_1"),
                        r => r.HasOne<ArtPiece>().WithMany().HasForeignKey("ArtPieceId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_artPieceContributor_0"),
                        j =>
                        {
                            j.HasKey("ArtPieceId", "ContributorId").HasName("PrimaryKey_52d01c86-43c6-45c5-81b9-5a679610b948");

                            j.ToTable("artPieceContributor");

                            j.IndexerProperty<int>("ArtPieceId").HasColumnName("artPieceId");

                            j.IndexerProperty<int>("ContributorId").HasColumnName("contributorId");
                        });

                entity.HasMany(d => d.License)
                    .WithMany(p => p.ArtPiece)
                    .UsingEntity<Dictionary<string, object>>(
                        "ArtPieceLicense",
                        l => l.HasOne<License>().WithMany().HasForeignKey("LicenseId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_artPieceLicense_1"),
                        r => r.HasOne<ArtPiece>().WithMany().HasForeignKey("ArtPieceId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_artPieceLicense_0"),
                        j =>
                        {
                            j.HasKey("ArtPieceId", "LicenseId").HasName("PrimaryKey_2e01765c-0a15-49d1-bfc3-3449d7496d5f");

                            j.ToTable("artPieceLicense");

                            j.IndexerProperty<int>("ArtPieceId").HasColumnName("artPieceId");

                            j.IndexerProperty<int>("LicenseId").HasColumnName("licenseId");
                        });
            });

            modelBuilder.Entity<ArtType>(entity =>
            {
                entity.ToTable("artType");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<BlogEntry>(entity =>
            {
                entity.HasKey(e => new { e.ContributorId, e.Year, e.Month, e.Day, e.SubId });

                entity.ToTable("blogEntry");

                entity.Property(e => e.ContributorId).HasColumnName("contributorId");

                entity.Property(e => e.Year).HasColumnName("year");

                entity.Property(e => e.Month).HasColumnName("month");

                entity.Property(e => e.Day).HasColumnName("day");

                entity.Property(e => e.SubId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("subId");

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("title");

                entity.Property(e => e.Uri)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("URI");
            });

            modelBuilder.Entity<Contributor>(entity =>
            {
                entity.ToTable("contributor");

                entity.HasIndex(e => e.FriendlyId, "UQ__contribu__52C88098DC068C64")
                    .IsUnique();

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.FirstName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FriendlyId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("friendlyId");

                entity.Property(e => e.LastName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MiddleName)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<License>(entity =>
            {
                entity.ToTable("license");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ShortName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}